Тестирование программного обеспечения (Software Testing) - проверка соответствия между реальным и ожидаемым поведением программы, осуществляемая на конечном наборе тестов, выбранном определенным образом. В более широком смысле, тестирование — это одна из техник контроля качества, включающая в себя активности по планированию работ (Test Management), проектированию тестов (Test Design), выполнению тестирования (Test Execution) и анализу полученных результатов (Test Analysis).

Целью тестирования ПО является выявление ошибок, пробелов или отсутствующих требований, заданных на этапе проектирования продукта.
Если в программном обеспечении есть ошибки или дефекты, они могут быть обнаружены на раннем этапе производства ПО и устранены до его поставки в продакшн. Правильно протестированный программный продукт обеспечивает надежность, безопасность и высокую производительность, что в дальнейшем приводит к экономии времени, денег и удовлетворенности клиентов. Тестирование важно, потому что ошибки в программном обеспечении могут дорого обойтись производителю. Они могут привести к серьезным финансовым потерям и даже человеческим жертвам.

STLC, или жизненный цикл тестирования — это последовательность действий, проводимых в процессе тестирования, с помощью которых гарантируется качество программного обеспечения и его соответствие требованиям. STLC включает действия по верификации и валидации. Тестирование состоит из серии действий, выполняемых по методике, с целью гарантирования качества продукта.
Этапы STLC-цикла
Цикл состоит из шести основных этапов:
1.	Анализ требований
Этап оценки требований (анализа требований). На этом этапе QA-команда оценивает требования с точки зрения тестирования. Для этого QA-команда может обращаться к представителям заказчика. Требования могут быть «функциональными» или «нефункциональными», то есть касаться или не касаться функциональной составляющей софта. Также на этом этапе проводится оценка возможности применения автоматизированного тестирования.
•	Определение типов тестирования
•	Сбор информации о приоритетах в тестировании
•	Подготовка матрицы отслеживания требований (RTM — Requirement Traceability Matrix)
•	Определение тестового окружения
•	Анализ возможности автоматизации тестирования (если нужно)
2.	Планирование тестирования
На этапе планирования руководитель команды QA определяет стратегию тестирования и оценивает трудозатраты. Также оцениваются ресурсы, тестовое окружение, возможные ограничения и график тестирования. На этом же этапе готовится и финализируется план тестирования.
•	Подготовка стратегии (или плана тестирования)
•	Выбор инструментов тестирования
•	Оценка трудозатрат
•	Планирование ресурсов, определение ролей и ответственности
•	Дополнительное обучение команды (если нужно)
3.	Создание тест-кейсов
На этом этапе происходит подготовка тестовых данных и создаются тест-кейсы.
•	Создание тест-кейсов (и автотестов, если будет применяться автоматизация)
•	Подготовка исходных данных для тестирования
4.	Настройка тестового окружения
Это настройка харда и софта, в которых будет осуществляться процесс тестирования. Это один из критически важных аспектов процесса, он может проходить параллельно этапу создания тест-кейсов. QA-команда может и не включаться в этот процесс, если тестовое окружение ей обеспечит команда разработки. QA-команда должна будет проверить работоспособность окружения (хотя бы smoke-тестом).
•	Понять нужную архитектуру, настройки окружения и подготовить список требований к харду и софту
•	Настроить тестовое окружение и тестовые данные
•	Провести smoke-тест окружения
5.	Выполнение тестирования
На этапе выполнения тестов QA проводит тестирование, выполняя подготовленные тест-кейсы. Процесс состоит из выполнения тестовых скриптов (при необходимости эти скрипты могут корректироваться). Далее идет создание баг-репортов. Если найдены баги, информация о них передается команде разработки для исправления и повторного тестирования QA-командой.
•	Выполнение тестирования в соответствии с планом
•	Получение результаты тестирования
•	Обновление RTM-матрицы (тест-кейсы из RTM-матрицы связываются с найденными багами)
•	Повторное тестирование исправленных багов
6.	Завершение цикла тестирования
На этапе завершения тестирования создается отчет о результатах тестирования. QA-команда обсуждает и анализирует баги, делает выводы из возникших проблем, чтобы избежать подобных проблем в будущем.
•	Оценка критериев завершения цикла (основывается на времени, трудозатратах, покрытии тестами)
•	Подготовка документа с выводами, сделанными во время тестирования
•	Подготовка отчета о завершении тестирования
•	Подготовка отчета для клиента с количественными и качественными характеристиками тестируемой системы
•	Анализ результатов тестирования
Каждый из этих этапов имеет четкие критерии начала и завершения.
Критерий начала: описывает условия, которые должны быть соблюдены перед тем, как начнется тестирование.
Критерий завершения: описывает условия, которые должны быть соблюдены перед тем, как тестирование завершится.
Есть критерии начала и завершения для всех этапов STLC.

Верификация в тестировании ПО – процесс просмотра документации, дизайна, кода и программы для того, чтобы проверить, было ли программное обеспечение создано в соответствии с требованиями или нет. Основная цель процесса верификации – обеспечить качество приложения, дизайна, архитектуры и т.д. Процесс верификации включает в себя такие действия, как ревью, пошаговое руководство и инспекция.

Валидация в разработке ПО – динамический механизм тестирования и проверки того, действительно ли программный продукт соответствует точным потребностям заказчика или нет. Этот процесс помогает гарантировать, что ПО выполняет желаемое использование в подходящей среде. Процесс валидации включает в себя такие действия, как модульное тестирование, интеграционное тестирование, системное тестирование и пользовательское приемочное тестирование.

Ключевая разница:
- Процесс верификации включает в себя проверку документации, дизайна, кода и программы, в то время как процесс валидации включает в себя тестирование и проверку самого продукта.
- Верификация не требует исполнения кода, в то время как валидация требует.
- Верификация использует такие методы, как ревью, пошаговое руководство, инспекцию и отладку, в то время как валидация использует такие методы, как тестирование чёрного ящика, белого ящика и нефункциональное тестирование.
- Верификация проверяет, соответствует ли ПО спецификации, в то время как валидация проверяет, соответствует ли ПО требованиям и ожиданиям.
- Верификация находит баги на раннем этапе цикла разработки, в то время как валидация находит баги, которые верификация не может.

Сравнивая валидацию и верификацию в тестировании ПО, процесс верификации нацелен на архитектуру ПО, дизайн, базу данных и др., в то время как процесс валидации нацелен на реальный программный продукт.
Верификация выполняется командой QA, в то время как валидация выполняется командой тестирования с командой QA.
Сравнивая тестирование верификации и валидации, процесс верификации предшествует процессу валидации, в то время как процесс валидации идет после процесса верификации.

Принципы тестирования:

1.	Исчерпывающее тестирование невозможно:
Сколь бы скрупулёзным тестирование не было, нельзя учесть все возможные сценарии, а значит и предвидеть все возможные ошибки (долго и дорого).
2.	Тестирование демонстрирует наличие дефектов, а не их отсутствие:
Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие.
3.	Заблуждение об отсутствии ошибок:
Тот факт, что тестирование не обнаружило дефектов, ещё не значит, что программа хорошая. С учетом того, как этот принцип доносят на просторах интернета, легко спутать его с первым принципом. Многие забывают, что суть принципа: отсутствие дефектов - необходимое, но не достаточное условие хорошего ПО. Есть и другие факторы, влияющие на качество продукта. И вот о них-то как раз все забывают, считая, что лишь тестировщики и тестирование ответственны за качество.
4.	Раннее тестирование сохраняет время и деньги:
Чем раньше начнутся активности тестирования, тем дешевле исправление выявленных ошибок. Грубо говоря, вычитка требований стоит пары часов обсуждений и времени аналитика, в то время как тот же баг в боевой системе стоит потерянных клиентов, времени разработчиков и всего цикла релиза.
5.	Принцип скопления или кластеризация дефектов:
Дефекты не размазаны равномерно по приложению, а сконцентрированы в больших количествах в некоторых модулях системы (80% дефектов в 20% продукта).
6.	Тестирование зависит от контекста:
Набор методологий и инструментов, а также подходов и ресурсов для тестирования зависит от того, что именно вы тестируете и на сколько объект тестирования важен.
7.	Парадокс пестицида:
Если вы долго проводите одни и те же проверки, скорее всего новых багов вы не найдете. Именно поэтому периодически нужно "встряхивать" вашу тестовую базу, ревьюить её новыми сотрудниками и проводить исследовательское тестирование.


